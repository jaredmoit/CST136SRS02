#include "stdafx.h"
#include "Chart.h"

Chart::Feature Chart::getFeature(int lat, int lng) const
{
	return Feature();
}

Chart::Chart()
	:map_{
{ 2, 2, 2, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder},
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder },
{ Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder, Feature::kBorder }
}
{

}
